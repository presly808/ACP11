1. Previous test questions
***********************************************************

        2.1 Algorithms and Data Structures
            Complexity of Algorithm
                big O-notation

            Recursion
                http://codingbat.com/java/Recursion-1
                Use debug for understanding

            Search
                Linear O(N)
                BinarySearch O(logN)

            Sort (see visualization sites)
                bubble
                insertion
                selection
                merge
                quick

            Data Structures
                LinkedList(based on Node)
                ArrayList
                Stack, Queue, Dequeue
                Tree -> BinaryTree, RedBlackTree(TreeSet, TreeMap)
                Hash structures (HashSet,LinkedHashSet, HashMap, LinkedHashMap)

            links:  http://www.cs.usfca.edu/~galles/visualization/Algorithms.html
                    http://visualgo.net/

        2.2. OOP
            Encapsulation, Inheritance, Polymorphism, Abstraction

        2.3  OOD(design pattern)

            SOLID principles
            book: Head First Design Patterns

        2.3. Java Core
            Lifecycle of program
            JVM
                Garbage Collector, ClassLoader -> ClassPath
            Primitive and Reference types
            Arrays
            Loops
            switch-case
            method in java
            access modifiers
            final (Immutable class)
            static
            enum
            Formatter, Date, Calendar
            Exceptions(checked, unchecked)
            try-catch-finally
            java.io.*;(Streams)
            Serialization

            Generics
            Collections in Java
            Iterable <- Collection <- List,Set,Queue
            Map
*************************************************

Some helpful notes of algorithms and datastrucutres
2. Topics
       Algorithms              Algorithm complexity
           search              Time           Data
               linear search - O(N)            1
               binary search - O(logN)         1
           sort
               bubble sort    |
               insertion sort |} O(N^2)        1
               selection sort |

               merge sort      O(N*logN)       O(N)
               quick sort      O(N*logN)       1

           Indexing - Data Structures
                   HashMap, TreeMap
           insert  O(1)        O(logN)
           delete  O(1)        O(logN)
           find    O(1)        O(logN)

           Collections in java

           http://www.codejava.net/images/articles/javacore/collections/collections%20framework%20overview.png
           remember all methods in interfaces Collection -> Set,List,Queue; Map
   	http://habrahabr.ru/post/127864/
   	http://habrahabr.ru/post/128269/
   	http://habrahabr.ru/post/128017/
   	http://habrahabr.ru/post/129037/

   	ArtCode implementation of some data structures
   	https://github.com/presly808/ACO8/tree/master/src/ua/artcode/data_structures

           Algo and Data Structures Visualization
           http://www.cs.usfca.edu/~galles/visualization/
           http://visualgo.net/

           Algorithm and Data Structure Books:
           Н.Вирт Алгоритмы и структуры данных
           Роберт Седжвик, Кевин Уэйн "Алгоритмы на Java"
           Кормен "Алгоритмы. Построение и анализ"
           Андерсон, Джеймс А. Дискретная математика и комбинаторика.

   	Recursion intro. https://github.com/presly808/ACO8/tree/master/src/ua/artcode/recursion/tree/company

   2. Implement Map interface based on hashtable
                   see example  https://github.com/presly808/ACP9/blob/master/src/main/java/ua/artcode/week1/hashstructure/MyHashMap.java
      Must use: Generics, Exceptions,
                   loadFactor(rehashing)
                   implement Iterator (for keys and values)

                !Your type that you put in map as key must override (equals, hashCode)


   3*. Implement BinarySearchTree https://github.com/presly808/ACP9/blob/master/src/main/java/ua/artcode/week1/tree/BST.java
       methods
       - add
       - traverse
       - findMin
       - findMax
       - delete

       * tree optimization
           * rotate right
           * rotate left
       * implement iterator


Git online courses (have to finish)

   4. https://try.github.io/levels/1/challenges/1
      https://www.codecademy.com/learn/learn-git

    Git tutorial
    https://www.atlassian.com/git/tutorials/

    Git book
    https://git-scm.com/book/uk/v2

   Literature

       "Head First Java" - Basics of Java with a lot of pictures and interesting tasks
       "Head First Design Pattern" - about design patterns

       Next books contains different situations that help to deep understand Java
       "Philosophy of Java"
       "Effective Java" - Rules of using of java
       "OCA/OCP Java SE 7 Programmer I & II Study Guide" - preparing to oracle exams

       Reference books

       "Core Java 2: Volume I–Fundamentals  Cay S. Horstmann
       "Core Java 2: Volume II—Advanced Features  Cay S. Horstmann
       Java. The Complete Reference. Herbert Schildt
